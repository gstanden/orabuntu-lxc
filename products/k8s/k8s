#!/bin/bash
#
#    Copyright 2015-2021 Gilbert Standen
#    This file is part of Orabuntu-LXC.

#    Orabuntu-LXC is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.

#    Orabuntu-LXC is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with Orabuntu-LXC.  If not, see <http://www.gnu.org/licenses/>.

#    v2.4 		GLS 20151224
#    v2.8 		GLS 20151231
#    v3.0 		GLS 20160710 Updates for Ubuntu 16.04
#    v4.0 		GLS 20161025 DNS DHCP services moved into an LXC container
#    v5.0 		GLS 20170909 Orabuntu-LXC Multi-Host
#    v6.0-AMIDE-beta	GLS 20180106 Orabuntu-LXC AmazonS3 Multi-Host Docker Enterprise Edition (AMIDE)
#    v7.0-ELENA-beta    GLS 20210428 Enterprise LXD Edition New AMIDE

#    Note that this software builds a containerized DNS DHCP solution (bind9 / isc-dhcp-server).
#    The nameserver should NOT be the name of an EXISTING nameserver but an arbitrary name because this software is CREATING a new LXC-containerized nameserver.
#    The domain names can be arbitrary fictional names or they can be a domain that you actually own and operate.
#    There are two domains and two networks because the "seed" LXC containers are on a separate network from the production LXC containers.
#    If the domain is an actual domain, you will need to change the subnet using the subnets feature of Orabuntu-LXC

clear
MajorRelease=$1
PointRelease=$2
OracleRelease=$1$2
OracleVersion=$1.$2
Domain1=$3
Domain2=$4
NameServer=$5
OSMemRes=$6
MultiHost=$7
LxcOvsVersion=$8
DistDir=$9
SubDirName=${10}

function GetMultiHostVar4 {
	echo $MultiHost | cut -f4 -d':'
}
MultiHostVar4=$(GetMultiHostVar4)

echo ''
echo "=============================================="
echo "Script: k8s                                   "
echo "=============================================="
echo ''

sleep 5

clear

echo ''
echo "=============================================="
echo "Establish sudo privileges...                  "
echo "=============================================="
echo ''

echo $MultiHostVar4 | sudo -S date

echo ''
echo "=============================================="
echo "Privileges established.                       "
echo "=============================================="

sleep 5

clear


echo ''
echo "=============================================="
echo "Display DistDir...                            "
echo "=============================================="
echo ''

echo $DistDir

echo ''
echo "=============================================="
echo "Done: Display DistDir.                        "
echo "=============================================="
echo ''

sleep 5

clear

if [ -e /sys/hypervisor/uuid ]
then
        function CheckAWS {
                cat /sys/hypervisor/uuid | cut -c1-3 | grep -c ec2
        }
        AWS=$(CheckAWS)
else
        AWS=0
fi

function GetNameServerBase {
        echo $NameServer | cut -f1 -d'-'
}
NameServerBase=$(GetNameServerBase)

function GetGroup {
        id | cut -f2 -d' ' | cut -f2 -d'(' | cut -f1 -d')'
}
Group=$(GetGroup)

function GetOwner {
        id | cut -f1 -d' ' | cut -f2 -d'(' | cut -f1 -d')'
}
Owner=$(GetOwner)

function GetLxcVersion {
	echo $LxcOvsVersion | cut -f1 -d':'
}
LxcVersion=$(GetLxcVersion)

function GetOvsVersion {
	echo $LxcOvsVersion | cut -f2 -d':'
}
OvsVersion=$(GetOvsVersion)

function GetMultiHostVar1 {
	echo $MultiHost | cut -f1 -d':'
}
MultiHostVar1=$(GetMultiHostVar1)

function GetMultiHostVar2 {
	echo $MultiHost | cut -f2 -d':'
}
MultiHostVar2=$(GetMultiHostVar2)

function GetMultiHostVar3 {
	echo $MultiHost | cut -f3 -d':'
}
MultiHostVar3=$(GetMultiHostVar3)

function GetMultiHostVar5 {
	echo $MultiHost | cut -f5 -d':'
}
MultiHostVar5=$(GetMultiHostVar5)

function GetMultiHostVar6 {
	echo $MultiHost | cut -f6 -d':'
}
MultiHostVar6=$(GetMultiHostVar6)

function GetMultiHostVar7 {
	echo $MultiHost | cut -f7 -d':'
}
MultiHostVar7=$(GetMultiHostVar7)

function GetMultiHostVar8 {
	echo $MultiHost | cut -f8 -d':'
}
MultiHostVar8=$(GetMultiHostVar8)

function GetMultiHostVar9 {
	echo $MultiHost | cut -f9 -d':'
}
MultiHostVar9=$(GetMultiHostVar9)

function GetMultiHostVar10 {
	echo $MultiHost | cut -f10 -d':'
}
MultiHostVar10=$(GetMultiHostVar10)
GRE=$MultiHostVar10
GREValue=$MultiHostVar10

function GetMultiHostVar11 {
        echo $MultiHost | cut -f11 -d':'
}
MultiHostVar11=$(GetMultiHostVar11)
Product=$MultiHostVar11

function GetMultiHostVar12 {
        echo $MultiHost | cut -f12 -d':'
}
MultiHostVar12=$(GetMultiHostVar12)
LXDValue=$MultiHostVar12
LXD=$LXDValue

function GetMultiHostVar13 {
        echo $MultiHost | cut -f13 -d':'
}
MultiHostVar13=$(GetMultiHostVar13)
K8S=$MultiHostVar13

function GetMultiHostVar14 {
        echo $MultiHost | cut -f14 -d':'
}
MultiHostVar14=$(GetMultiHostVar14)
PreSeed=$MultiHostVar14

function GetMultiHostVar15 {
        echo $MultiHost | cut -f15 -d':'
}
MultiHostVar15=$(GetMultiHostVar15)
LXDCluster=$MultiHostVar15

function GetMultiHostVar16 {
        echo $MultiHost | cut -f16 -d':'
}
MultiHostVar16=$(GetMultiHostVar16)
LXDStorageDriver=$MultiHostVar16

function GetMultiHostVar17 {
        echo $MultiHost | cut -f17 -d':'
}
MultiHostVar17=$(GetMultiHostVar17)
StoragePoolName=$MultiHostVar17

function GetMultiHostVar18 {
        echo $MultiHost | cut -f18 -d':'
}
MultiHostVar18=$(GetMultiHostVar18)
BtrfsLun=$MultiHostVar18

function GetMultiHostVar19 {
        echo $MultiHost | cut -f19 -d':'
}
MultiHostVar19=$(GetMultiHostVar19)
Docker=$MultiHostVar19

function GetMultiHostVar20 {
        echo $MultiHost | cut -f20 -d':'
}
MultiHostVar20=$(GetMultiHostVar20)
TunType=$MultiHostVar20

function GetMultiHostVar37 {
        echo $MultiHost | cut -f37 -d':'
}
MultiHostVar37=$(GetMultiHostVar37)
ContainerRuntime=$MultiHostVar37

function CheckSystemdResolvedInstalled {
        sudo netstat -ulnp | grep 53 | sed 's/  */ /g' | rev | cut -f1 -d'/' | rev | sort -u | grep systemd- | wc -l
}
SystemdResolvedInstalled=$(CheckSystemdResolvedInstalled)

function CheckNetworkManagerRunning {
	ps -ef | grep NetworkManager | grep -v grep | wc -l
}
NetworkManagerRunning=$(CheckNetworkManagerRunning)

GetLinuxFlavors(){
if   [[ -e /etc/oracle-release ]]
then
        LinuxFlavors=$(cat /etc/oracle-release | cut -f1 -d' ')
elif [[ -e /etc/redhat-release ]]
then
        LinuxFlavors=$(cat /etc/redhat-release | cut -f1 -d' ')
elif [[ -e /usr/bin/lsb_release ]]
then
        LinuxFlavors=$(lsb_release -d | awk -F ':' '{print $2}' | cut -f1 -d' ')
elif [[ -e /etc/issue ]]
then
        LinuxFlavors=$(cat /etc/issue | cut -f1 -d' ')
else
        LinuxFlavors=$(cat /proc/version | cut -f1 -d' ')
fi
}
GetLinuxFlavors

function TrimLinuxFlavors {
echo $LinuxFlavors | sed 's/^[ \t]//;s/[ \t]$//'
}
LinuxFlavor=$(TrimLinuxFlavors)

if   [ $LinuxFlavor = 'Oracle' ]
then
        function GetOracleDistroRelease {
                sudo cat /etc/oracle-release | cut -f5 -d' ' | cut -f1 -d'.'
        }
        OracleDistroRelease=$(GetOracleDistroRelease)
        if   [ $OracleDistroRelease -eq 7 ] || [ $OracleDistroRelease -eq 6 ]
        then
                CutIndex=7
        elif [ $OracleDistroRelease -eq 8 ]
        then
                CutIndex=6
        fi

	function GetRedHatVersion {
                sudo cat /etc/redhat-release | cut -f"$CutIndex" -d' ' | cut -f1 -d'.'
        }

	function GetRedHatMinorVersion {
		sudo cat /etc/redhat-release | cut -f"$CutIndex" -d' ' | cut -f2 -d'.'
	}

        RedHatVersion=$(GetRedHatVersion)
	RedHatMinorVersion=$(GetRedHatMinorVersion)
	RHV=$RedHatVersion
	RHMV=$RedHatMinorVersion
        function GetOracleDistroRelease {
                sudo cat /etc/oracle-release | cut -f5 -d' ' | cut -f1 -d'.'
        }
        OracleDistroRelease=$(GetOracleDistroRelease)
        Release=$OracleDistroRelease
        LF=$LinuxFlavor
        RL=$Release
elif [ $LinuxFlavor = 'Red' ] || [ $LinuxFlavor = 'CentOS' ]
then
	if   [ $LinuxFlavor = 'Red' ]
        then
                function GetRedHatVersion {
                        sudo cat /etc/redhat-release | rev | cut -f2 -d' ' | cut -f2 -d'.'
                }
        elif [ $LinuxFlavor = 'CentOS' ]
        then
                function GetRedHatVersion {
                        cat /etc/redhat-release | sed 's/ Linux//' | cut -f1 -d'.' | rev | cut -f1 -d' '
                }
        fi
	RedHatVersion=$(GetRedHatVersion)
	RHV=$RedHatVersion
        Release=$RedHatVersion
        LF=$LinuxFlavor
        RL=$Release
elif [ $LinuxFlavor = 'Fedora' ]
then
        CutIndex=3
        function GetRedHatVersion {
                sudo cat /etc/redhat-release | cut -f"$CutIndex" -d' ' | cut -f1 -d'.'
        }
        RedHatVersion=$(GetRedHatVersion)
	RHV=$RedHatVersion
        if   [ $RedHatVersion -ge 28 ]
        then
                Release=8
        elif [ $RedHatVersion -ge 19 ] && [ $RedHatVersion -le 27 ]
        then
                Release=7
        elif [ $RedHatVersion -ge 12 ] && [ $RedHatVersion -le 18 ]
        then
                Release=6
        fi
        LF=$LinuxFlavor
        RL=$Release
elif [ $LinuxFlavor = 'Ubuntu' ]
then
        function GetUbuntuVersion {
                cat /etc/lsb-release | grep DISTRIB_RELEASE | cut -f2 -d'='
        }
        UbuntuVersion=$(GetUbuntuVersion)
        LF=$LinuxFlavor
        RL=$UbuntuVersion
        function GetUbuntuMajorVersion {
                cat /etc/lsb-release | grep DISTRIB_RELEASE | cut -f2 -d'=' | cut -f1 -d'.'
        }
        UbuntuMajorVersion=$(GetUbuntuMajorVersion)
fi

function GetOperation {
echo $MultiHost | cut -f1 -d':'
}
Operation=$(GetOperation)

sleep 5

clear

echo ''
echo "=============================================="
echo "Create Kubernetes cluster...                  "
echo "=============================================="
echo ''

echo "Product = "$Product

sleep 5

clear

echo ''
echo "=============================================="
echo "Install wget and unzip...                     "
echo "=============================================="
echo ''

sudo yum -y install wget unzip

echo ''
echo "=============================================="
echo "Done: Install wget and unzip.                 "
echo "=============================================="
echo ''

sleep 5

clear

echo ''
echo "=============================================="
echo "Unzip Kubernetes github ...                   "
echo "=============================================="
echo ''

sleep 5

cd /opt/olxc/"$DistDir"/products/k8s
rm master* kubernetes*
wget -4 https://github.com/gstanden/kubernetes/archive/refs/heads/master.zip
unzip  master.zip

echo ''
echo "=============================================="
echo "Done: Unzip Kubernetes github.                "
echo "=============================================="
echo ''

sleep 5

clear

echo ''
echo "=============================================="
echo "Untar Orabuntu product.tar file...            "
echo "=============================================="
echo ''

tar -xvf /opt/olxc/"$DistDir"/"$SubDirName"/archives/product.tar -C /opt/olxc/"$DistDir"/products/$Product --touch

echo ''
echo "=============================================="
echo "Done: Untar Orabuntu product.tar file.        "
echo "=============================================="
echo ''

sleep 5

clear

cd kubernetes-master/lxd-provisioning

chmod +x *.sh

echo ''
echo "=============================================="
echo "Run cont-centos8-create.sh script...          "
echo "=============================================="
echo ''

sleep 5

clear

./cont-centos8-create.sh $NameServer

echo ''
echo "=============================================="
echo "Done: Run cont-centos8-create.sh script.      "
echo "=============================================="
echo ''

sleep 5

clear

echo ''
echo "=============================================="
echo "Run host-oracle8.sh script...          "
echo "=============================================="
echo ''

./host-oracle8.sh 

sleep 5

clear

echo ''
echo "=============================================="
echo "Done: Run host-oracle8.sh script.             "
echo "=============================================="
echo ''

sleep 5

clear

echo ''
echo "=============================================="
echo "Run cont-centos8-push.sh script...            "
echo "=============================================="
echo ''

./cont-centos8-push.sh 

sleep 5

clear

echo ''
echo "=============================================="
echo "Done: Run cont-centos8-push.sh script.        "
echo "=============================================="
echo ''

sleep 5

clear

echo ''
echo "=============================================="
echo "Run cont-centos8-push-crio.sh...              "
echo "=============================================="
echo ''

./cont-centos8-push-crio.sh
cat cont-centos8-push-crio.sh

echo ''
echo "=============================================="
echo "Done: Run cont-centos8-push-crio.sh           "
echo "=============================================="
echo ''

sleep 5

clear

echo ''
echo "=============================================="
echo "Run cont-centos8-push-containerd.sh ...       "
echo "=============================================="
echo ''

./cont-centos8-push-containerd.sh
cat cont-centos8-push-containerd.sh 

echo ''
echo "=============================================="
echo "Done: Run cont-centos8-push-containerd.sh     "
echo "=============================================="
echo ''

sleep 5

clear


echo ''
echo "=============================================="
echo "Run cont-centos8-exec-maestro.sh script...    "
echo "=============================================="
echo ''

sleep 5

clear

./cont-centos8-exec-maestro.sh $ContainerRuntime

echo ''
echo "=============================================="
echo "Done: Run cont-centos8-exec-maestro.sh script "
echo "=============================================="
echo ''

sleep 5

clear

echo ''
echo "=============================================="
echo "Run cont-centos8-exec-violin1.sh script...    "
echo "=============================================="
echo ''

./cont-centos8-exec-violin1.sh $ContainerRuntime

echo ''
echo "=============================================="
echo "Done: Run cont-centos8-exec-violin1.sh script "
echo "=============================================="
echo ''

sleep 5

clear

echo ''
echo "=============================================="
echo "Run cont-centos8-exec-violin2.sh script...    "
echo "=============================================="
echo ''

./cont-centos8-exec-violin2.sh $ContainerRuntime

echo ''
echo "=============================================="
echo "Done: Run cont-centos8-exec-violin2.sh script "
echo "=============================================="
echo ''

sleep 5

clear

echo ''
echo "=============================================="
echo "Run cont-centos8-push-ingress-nginx-examples  "
echo "=============================================="
echo ''

./cont-centos8-push-ingress-nginx-examples.sh
cat cont-centos8-push-ingress-nginx-examples.sh

echo ''
echo "=============================================="
echo "Done: cont-centos8-push-ingress-nginx-example "
echo "=============================================="
echo ''

sleep 5

clear

echo ''
echo "=============================================="
echo "Run cont-centos8-push-configmap...            "
echo "=============================================="
echo ''

./cont-centos8-push-configmap.sh
cat cont-centos8-push-configmap.sh

echo ''
echo "=============================================="
echo "Done: Run cont-centos8-push-configmap.        "
echo "=============================================="
echo ''

sleep 5

clear

echo ''
echo "=============================================="
echo "Run cont-centos8-push-ingress-nginx-yaml...   "
echo "=============================================="
echo ''

./cont-centos8-push-ingress-nginx-yaml.sh
cat cont-centos8-push-ingress-nginx-yaml.sh

echo ''
echo "=============================================="
echo "Done: Run cont-centos8-push-ingress-nginx-yaml"
echo "=============================================="
echo ''

sleep 5

clear

echo ''
echo '#######################################'
echo '# Following run only on maestro nodes:#'
echo '#######################################'

sleep 5

clear

echo ''
echo "=============================================="
echo "Run cont-centos8-5 (run kubeadm init) ...     "
echo "=============================================="
echo ''

sleep 5

eval echo "'/var/lib/snapd/snap/bin/lxc exec maestro -- /root/cont-centos8-5.sh $ContainerRuntime' | sg lxd"

echo ''
echo "=============================================="
echo "Done: Run cont-centos8-5 (run kubeadm init)   "
echo "=============================================="
echo ''

sleep 5

clear

if [ $ContainerRuntime = 'containerd' ]
then
	for Node in violin1 violin2 maestro
	do
		echo ''
		echo "=============================================="
		echo "Convert $Node to containerd runtime...        "
		echo "=============================================="
		echo ''

		sleep 5

		clear
		
		echo ''
		echo "=============================================="
		echo "Cordon and drain $Node ...                    "
		echo "=============================================="
		echo ''

sshpass -p root ssh -t -o CheckHostIP=no -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@maestro "export KUBECONFIG=/etc/kubernetes/admin.conf; kubectl cordon $Node"
sshpass -p root ssh -t -o CheckHostIP=no -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@maestro "export KUBECONFIG=/etc/kubernetes/admin.conf; kubectl drain  $Node --delete-emptydir-data --ignore-daemonsets"
		
		echo ''
		echo "=============================================="
		echo "Done: Cordon and drain $Node.                 "
		echo "=============================================="
		echo ''

		sleep 5

		clear

		eval echo "'/var/lib/snapd/snap/bin/lxc exec $Node -- systemctl stop kubelet' | sg lxd"

		echo ''
		echo "=============================================="
		echo "Uninstall docker on $Node...                  "
		echo "=============================================="
		echo ''

		sleep 5

		eval echo "'/var/lib/snapd/snap/bin/lxc exec $Node -- systemctl stop docker' | sg lxd"
		eval echo "'/var/lib/snapd/snap/bin/lxc exec $Node -- dnf remove docker-ce docker-ce-cli -y' | sg lxd"

		echo ''
		echo "=============================================="
		echo "Done: Uninstall docker on $Node.              "
		echo "=============================================="
		echo ''

		sleep 5

		clear

		eval echo "'/var/lib/snapd/snap/bin/lxc exec $Node -- systemctl stop containerd' | sg lxd"
	 	eval echo "'/var/lib/snapd/snap/bin/lxc exec $Node -- containerd config default > /etc/containerd/config.toml' | sg lxd" > /dev/null 2>&1
		eval echo "'/var/lib/snapd/snap/bin/lxc exec $Node -- /root/cont-centos8-6.sh $ContainerRuntime $Node' | sg lxd"

		echo ''
		echo "=============================================="
		echo "Enable and start containerd on $Node...       "
		echo "=============================================="
		echo ''

		eval echo "'/var/lib/snapd/snap/bin/lxc exec $Node -- systemctl enable containerd' | sg lxd"
		eval echo "'/var/lib/snapd/snap/bin/lxc exec $Node -- systemctl start  containerd' | sg lxd"

		echo ''
		echo "=============================================="
		echo "Done: Enable and start containerd on $Node.   "
		echo "=============================================="
		echo ''

		sleep 5

		clear

		eval echo "'/var/lib/snapd/snap/bin/lxc exec $Node -- systemctl start kubelet' | sg lxd"
		
		if [ $Node != 'maestro' ]
		then	
			echo ''
			echo "=============================================="
			echo "Uncordon $Node ...                            "
			echo "=============================================="
			echo ''

			sshpass -p root ssh -t -o CheckHostIP=no -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@maestro "export KUBECONFIG=/etc/kubernetes/admin.conf; kubectl uncordon $Node"
		
			echo ''
			echo "=============================================="
			echo "Done: Uncordon $Node.                         "
			echo "=============================================="
			echo ''

			sleep 5

			clear
		
			echo ''
			echo "=============================================="
			echo "Display status of nodes ...                   "
			echo "=============================================="
			echo ''
	
			sshpass -p root ssh -t -o CheckHostIP=no -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@maestro "export KUBECONFIG=/etc/kubernetes/admin.conf; kubectl get -A nodes -o wide"
		
			echo ''
			echo "=============================================="
			echo "Done: Display status of nodes.                "
			echo "=============================================="
			echo ''

			sleep 5

			clear
		fi
		
		echo ''
		echo "=============================================="
		echo "Done: Convert $Node to containerd runtime.    "
		echo "=============================================="
		echo ''

		sleep 5

		clear
	done

	echo ''
	echo "=============================================="
	echo "Done: Run cont-centos8-6.                     "
	echo "=============================================="
	echo ''

	sleep 5

	clear

	echo ''
	echo "=============================================="
	echo "Sleep 1 minute before containers restart...   "
	echo "=============================================="
	echo ''

	sleep 60

	clear

	echo ''
	echo "=============================================="
	echo "Restart k8s containers ...  .                 "
	echo "=============================================="
	echo ''

	./host-oracle8-modules-remove.sh

	echo ''
	echo "=============================================="
	echo "Done: Restart k8s containers.                 "
	echo "=============================================="
	echo ''

	sleep 5

	clear

	echo ''
	echo "=============================================="
	echo "List containers ...                           "
	echo "=============================================="
	echo ''

	eval echo "'/var/lib/snapd/snap/bin/lxc list' | sg lxd"

	echo ''
	echo "=============================================="
	echo "Done: List containers.                        "
	echo "=============================================="
	echo ''

	sleep 5

	clear

	echo ''
	echo "=============================================="
	echo "Sleep 2 mins during kube-system startup ...   "
	echo "=============================================="
	echo ''

	sleep 120

	clear

	echo ''
	echo "=============================================="
	echo "Check for all kube-system Running  ...        "
	echo "=============================================="
	echo ''

        function GetCountKubeSystem {
                sshpass -p root ssh -qt -o CheckHostIP=no -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@maestro "export KUBECONFIG=/etc/kubernetes/admin.conf; kubectl get -A pods -o wide | grep -c Running"
        }
        CountKubeSystem=$(GetCountKubeSystem)

        function GetCountKubeSystemRunning {
                sshpass -p root ssh -qt -o CheckHostIP=no -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@maestro "export KUBECONFIG=/etc/kubernetes/admin.conf; kubectl get -A pods -o wide | grep -c kube-system"
        }
        CountKubeSystemRunning=$(GetCountKubeSystemRunning)

        echo 'CountKubeSystemRunning = '$CountKubeSystemRunning
        echo 'CountKubeSystem        = '$CountKubeSystem

        n=1
        while [ $CountKubeSystemRunning != $CountKubeSystem ] && [ $n -le 5 ]
        do
                sshpass -p root ssh -qt -o CheckHostIP=no -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@maestro "export KUBECONFIG=/etc/kubernetes/admin.conf; kubectl get -A pods -o wide"
		echo ''
                CountKubeSystem=$(GetCountKubeSystem)
                CountKubeSystemRunning=$(GetCountKubeSystemRunning)
                echo 'CountKubeSystemRunning = '$CountKubeSystemRunning
                echo 'CountKubeSystem        = '$CountKubeSystem
		echo ''
                n=$((n+1))
                sleep 15
        done

	echo ''
	echo "=============================================="
	echo "Done: Wait for all kube-system Running  ...   "
	echo "=============================================="
	echo ''

	sleep 5

	clear

	echo ''
	echo "=============================================="
	echo "Uncordon maestro ...                          "
	echo "=============================================="
	echo ''

	sshpass -p root ssh -t -o CheckHostIP=no -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@maestro "export KUBECONFIG=/etc/kubernetes/admin.conf; kubectl uncordon maestro"
	
	echo ''
	echo "=============================================="
	echo "Done: Uncordon maestro                        "
	echo "=============================================="
	echo ''

	sleep 5

	clear
		
fi

# metallb load balancer deployment

if [ $ContainerRuntime = 'docker' ] || [ $ContainerRuntime = 'containerd' ]
then
	echo ''
	echo "=============================================="
	echo "Run cont-centos8-7...                         "
	echo "=============================================="
	echo ''

	# eval echo "'/var/lib/snapd/snap/bin/lxc exec maestro -- /root/cont-centos8-7.sh' | sg lxd"

	echo ''
	echo "=============================================="
	echo "Done: Run cont-centos8-7.                     "
	echo "=============================================="
	echo ''

	# ingress-nginx deployment

	echo ''
	echo "=============================================="
	echo "Run cont-centos8-8...                         "
	echo "=============================================="
	echo ''

	eval echo "'/var/lib/snapd/snap/bin/lxc exec maestro -- /root/cont-centos8-8.sh' | sg lxd"

	echo ''
	echo "=============================================="
	echo "Done: Run cont-centos8-8.                     "
	echo "=============================================="
	echo ''

	sleep 5

	clear
fi

echo ''
echo "=============================================="
echo "Done: Create K8S cluster.                     "
echo "=============================================="
echo ''

sleep 5

clear

echo ''
echo "=============================================="
echo "Remove lib/modules mount...                   "
echo "=============================================="
echo ''

./host-oracle8-modules-remove.sh

echo ''
echo "=============================================="
echo "Done: Remove lib/modules mount.               "
echo "=============================================="
echo ''

sleep 5

clear


